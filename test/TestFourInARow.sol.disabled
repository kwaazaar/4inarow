pragma solidity ^0.4.2;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/FourInARow.sol";

contract TestFourInARow {

  function initialBalance() returns (uint) {
    return 100000000;
  }

  function testPlayersAfterDeployWithoutGas() {
    FourInARow sut = new FourInARow();//  FourInARow(DeployedAddresses.FourInARow());

    address actP1;
    address actP2;
    (actP1,actP2) = sut.whoPlays();

    Assert.equal(actP1, address(0), "unexpected player 1");
    Assert.equal(actP2, address(0), "unexpected player 2");
  }

  function testPlayersAfterSendGas() {
    FourInARow sut = new FourInARow();//  FourInARow(DeployedAddresses.FourInARow());

    address expP1 = tx.origin;
    address expP2 = address(0);
    //sut.transfer(10000000);

    address actP1;
    address actP2;
    (actP1,actP2) = sut.whoPlays();

    Assert.equal(actP1, expP1, "unexpected player 1");
    Assert.equal(actP2, expP2, "unexpected player 2");
  }

/*
  function testInitialBalanceWithNewMetaCoin() {
    MetaCoin meta = new MetaCoin();

    uint expected = 10000;

    Assert.equal(meta.getBalance(tx.origin), expected, "Owner should have 10000 MetaCoin initially");
  }
*/
}
